Step01 

	-1. Boş bir solution yaratılarak içinde Step01 adında bir proje yaratılması

	-2. Proje adım adım ilerleme şeklinde yapılacağı için tüm solution Step01,Step02,Step03,.... yapısında ayrı ayrı proje adımları şeklinde olacaktır. Bunların birbirini takip edecek şekilde olabilmesi için projenin namespace ve assembly kısımlarının aynı olabilmesi için gerekli değişiklikleri Project/Properties kısmından eTickets olarak ayarlayalım

	-3. Arka planda bir veritabanı olacağı ve CodeFirst yapısı kullanılacağı için gerekli NuGet paketlerinin yüklenmesi (EF).
		. Microsoft.EntityFrameworkCore (VT <-> Code arası Tercüman)
		. Microsoft.EntityFrameworkCore.SqlServer (SqlServer işlemleri için)
		. Microsoft.EntityFrameworkCore.Design (Model tasarımlarının VT tarafında aktarılması için)
		. Microsoft.EntityFrameworkCore.Tools (Yardımcı komutların bulunduğu)

	-4. VT mizde olacak olan tabloların yani modellerimizin(class) oluşturulması. (\Models altına)
		. Actor
		. Producer
		. Cinema
		. Movie
			Movie bilgilerimde Category türünü gösterecek bir alanımız olacak. Bunun tanımlarını ayrı bir class yapısı içinde tutalım(Enum yapısı). Bu tür tanımların da bulunduğu ayrı bir klasör yaratalım (\Data\Enums)

	-5. Model İlişkilendirmeleri (Relations)
		. Cinema <-->> Movie (bir Cinemada bir kaç Movie de oynayabilir)

		. Producer <-->> Movie (bir Producer bir kaç Movie yaratmış/yönetmiş olabilir)

		. Birçok Actor bir çok Movie de oynayabilir (many-to-many ilişki). Bundan dolayı Actor ile Movie class ları arasındaki böyle bir ilişkiyi tanımlayabilmek için ara bir modelden faydalanacağız (Actor_Movie.cs - Junction yapısı).
			Movie <-->> Actor_Movie (bir Movie de bir çok Actor olabilir)
			Actor <-->> Actor_Movie (bir Actor bir çok Movie de oynayabilir)

		-5.1 Modellerimiz üzerinde ilişkilendirmelerin tanımlanması
			
			. Producer.cs --> Relations

			. Cinema.cs --> Relations

			. Actor.cs --> Relations

			. Movies.cs --> Relations

	-6. Uygulamanın DbContext yapısının boş olarak eklenmesi (Db-Code arasında tercuman)
		. \Data\AppDbContext.cs.. ileryeyen adımlarda düzenleyeceğiz.

	-7. Uygulamanın ana giriş noktası olan Program.cs classında bu DbContext yapısı tanımlayalım. İlerleyen adımlarda düzenleyeceğiz.

	-8. AppDbContext.cs deki düzenlemeler.
		Bu sınıf yaratılırken modellerimizin birbirine bağlanması, model yapı ve tanımlarının VT tarafındaki tablo karşılıklarının tanımlanması işlemleri. ??? Actor_Movie ??

		Artık modellerimin VT tarafındaki karşılıkları olacak DbSet tanımlarının yapılması.

	-9. VT ye bağlantı ve işlemler için bana bir ConnectionString gerekli.Bu ConnStr bilgisinin pek ortalarda gözükmesi pek istenmez. Bu yüzden daha gizli olan bir dosya var.(appsettings.json) ConnStr buraya yazılması daha doğru bir yol.

	-10. Program.cs altında daha önceden belirtimini yapmış olduğumuz AddDbContext kısmında bu config değerlerini okuyacak ve öğrenecek gerekli düzenlemelerin yapılması

	-11. Şimdi sıra geldi DB yapımızı ortaya(c# ca) çıkarmaya
		Nuget PM console altında
			PM>add-migration 01_Initial

	-12. İşlem başarılı ise Migration isimli dizinin altında ilgili VT yapısının kodsal halini gösteren bir sınıf oluşuyor(Bunu kendi kullanıyor). Not: Daha henüz VT oluşmadı.

	-13. VT nin yaratılabilmesi için PM Console dan
		PM> update-database 01_Initial komutu çalıştırılır. VT boş olarak yaratılmış olur.

	-14. Şu an VT yapı olarak oluştu . Ama içinde herhangi bir veri yok. Kod tarafından fake/dummy data yaratacak şekilde bazı düzenlemeler yapalım.
		Data dizini altında AppDbInitializer.cs isminde bir class tanımlayalım
		ve içine VT tarafındaki tablolarda bulunacak dummy verileri kodlayalım.

	-15. Program.cs(uygulamanın ana giriş noktası) altına bu veri yaratma kısmını ekleyelim. Ve çalıştıralım.

	Şu an normal bir şekilde uygulama çalıştı. Geri planda VT mizde veriler oluştu